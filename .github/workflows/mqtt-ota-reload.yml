name: OTA Reload on Commit

on:
  push:
    branches:
      - main # Adjust this to your branch if necessary

jobs:
  ota_reload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_GITHUB_TOKEN }}
          submodules: recursive

      - name: Install git-crypt
        run: sudo apt-get install git-crypt

      - name: Unlock git-crypt
        run: |
          echo "${{ secrets.GIT_CRYPT_KEY }}" | base64 --decode > git-crypt-key
          git-crypt unlock git-crypt-key
          rm git-crypt-key
        working-directory: ${{ github.workspace }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Use Docker image for ESP32 build
        run: |
          docker pull ${{ secrets.DOCKER_USER_NAME }}/esp-idf:latest

      - name: Get the current commit hash
        id: vars
        run: echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Configure Git identity
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"

      - name: Tag the commit if tag doesn't exist
        id: tag
        run: |
          VERSION_TAG="v1.0.0-${{ env.SHA_SHORT }}"
          if git ls-remote --tags origin | grep -qw "refs/tags/$VERSION_TAG"; then
            echo "Tag $VERSION_TAG already exists"
          else
            echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
            git tag -a $VERSION_TAG -m "Tagging commit ${{ env.SHA_SHORT }}"
            git push origin $VERSION_TAG
          fi

      - name: Build for Tennis House
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            -e COMPONENT_KCONFIGS_DIR=/workspace/components \
            -e VERSION_TAG=${{ env.VERSION_TAG }} \
            ${{ secrets.DOCKER_USER_NAME }}/esp-idf:latest \
            /bin/bash -c ". /opt/esp-idf/export.sh && git config --global --add safe.directory /workspace && idf.py -D SDKCONFIG=sdkconfig.tennis build"
        working-directory: ${{ github.workspace }}

      - name: Append Tennis House S3/URL path to environment
        run: |
          TENNIS_S3_IMAGE=coop-snooper/tennis-house/${{ env.VERSION_TAG}}/firmware.bin
          echo "TENNIS_S3_PATH=s3://${{ secrets.AWS_S3_OTA_BUCKET }}/${TENNIS_S3_IMAGE}" >> $GITHUB_ENV
          echo "TENNIS_URL_PATH=https://${{ secrets.AWS_S3_OTA_BUCKET }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/${TENNIS_S3_IMAGE}" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}

      - name: Upload Tennis House image to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          aws s3 cp build/firmware.bin ${{ env.TENNIS_S3_PATH }}
        working-directory: ${{ github.workspace }}

      - name: Clean build directory
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace ${{ secrets.DOCKER_USER_NAME }}/esp-idf:latest \
            /bin/bash -c ". /opt/esp-idf/export.sh && idf.py fullclean"
        working-directory: ${{ github.workspace }}

      - name: Build for Farm House
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            -e COMPONENT_KCONFIGS_DIR=/workspace/components \
            -e VERSION_TAG=${{ env.VERSION_TAG }} \
            ${{ secrets.DOCKER_USER_NAME }}/esp-idf:latest \
             /bin/bash -c ". /opt/esp-idf/export.sh && git config --global --add safe.directory /workspace && idf.py -D SDKCONFIG=sdkconfig.farm build"
        working-directory: ${{ github.workspace }}

      - name: Append Farm House S3/URL path to environment
        run: |
          FARM_S3_IMAGE=coop-snooper/farm-house/${{ env.VERSION_TAG}}/firmware.bin
          echo "FARM_S3_PATH=s3://${{ secrets.AWS_S3_OTA_BUCKET }}/${FARM_S3_IMAGE}" >> $GITHUB_ENV
          echo "FARM_URL_PATH=https://${{ secrets.AWS_S3_OTA_BUCKET }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/${FARM_S3_IMAGE}" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}

      - name: Upload Farm House image to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws s3 cp build/firmware.bin ${{ env.FARM_S3_PATH }}
        working-directory: ${{ github.workspace }}

      - name: Build for Test
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            -e COMPONENT_KCONFIGS_DIR=/workspace/components \
            -e VERSION_TAG=${{ env.VERSION_TAG }} \
            ${{ secrets.DOCKER_USER_NAME }}/esp-idf:latest \
             /bin/bash -c ". /opt/esp-idf/export.sh && git config --global --add safe.directory /workspace && idf.py -D SDKCONFIG=sdkconfig.test build"
        working-directory: ${{ github.workspace }}

      - name: Append Test S3/URL path to environment
        run: |
          TEST_S3_IMAGE=coop-snooper/test/${{ env.VERSION_TAG}}/firmware.bin
          echo "TEST_S3_PATH=s3://${{ secrets.AWS_S3_OTA_BUCKET }}/${TEST_S3_IMAGE}" >> $GITHUB_ENV
          echo "TEST_URL_PATH=https://${{ secrets.AWS_S3_OTA_BUCKET }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/${TEST_S3_IMAGE}" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}

      - name: Upload Farm House image to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws s3 cp build/firmware.bin ${{ env.TEST_S3_PATH }}
        working-directory: ${{ github.workspace }}

      - name: Publish MQTT message
        env:
          AWS_IOT_ENDPOINT_URL: "https://${{ secrets.AWS_IOT_ENDPOINT }}"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws iot-data publish \
            --endpoint-url $AWS_IOT_ENDPOINT_URL \
            --topic "${{secrets.MQTT_OTA_TOPIC}}" \
            --cli-binary-format raw-in-base64-out \
            --payload '{"${{ secrets.TENNIS_WIFI_MAC_ADDRESS }}": "${{ env.TENNIS_URL_PATH }}", 
                        "${{ secrets.FARM_WIFI_MAC_ADDRESS }}": "${{ env.FARM_URL_PATH }}",
                        "${{ secrets.TEST_WIFI_MAC_ADDRESS }}": "${{ env.TEST_URL_PATH }}"}'
        working-directory: ${{ github.workspace }}
